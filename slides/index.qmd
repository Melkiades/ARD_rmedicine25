---
title: "Supercharging Statistical Analysis with ARDs and the {cards} R Package"
subtitle: "Enhancing Automation, Traceability, and Reliability in Your Statistical Workflow."
author: "Becca Krouse and Davide Garolini, GSK/Roche"
logo: "images/cards-cardx-gtsummary-hex.png"
footer: "[https://melkiades.github.io/ARD_rmedicine25/](https://melkiades.github.io/ARD_rmedicine25/)"
editor: source
format: 
  revealjs: 
    theme: slides.scss
    transition: fade
    slide-number: true
    chalkboard: true
execute:
  echo: true
title-slide-attributes:
  data-background-image: images/cards-cardx-gtsummary-hex.png
  data-background-size: contain
  data-background-opacity: "0.15"
---

<!-- 1 -->
## Today's Plan

-   Discuss our experience using ARD-first approach for TLGs.

-   But first, a little background

    - CDISC's Analysis Results Standard (ARS)
    
    - ARDs with the {cards}+{cardx} packages
    
    - Tables with the {gtsummary} package

![](images/cards-cardx-gtsummary-hex){width="33%" fig-align="center"}

## CDISC's Analysis Results Standard (ARS)

![](images/ars-flow.png){fig-align="center"}

_How can we have **reproducible** results when there are so many layouts and formats?_

<!-- 2 -->
## Analysis Results Standard (ARS)

 - **Goal**: To improve the quality and efficiency of clinical reporting.
 - **Enables**: Automation, Reproducibility, Reusability, and Traceability.
 
|

_Separates the result from the presentation_ - maximum flexibility!

 - An ARS contains the statistical outcome (e.g., a mean of 25.3).
 - It does not contain display instructions (e.g., font size or cell color)
 
<!-- 3 -->
## CDISC's Analysis Results Standard (ARS)

![](images/ars-example-flow2.png){fig-align="center"}

## CDISC's Analysis Results Standard (ARS)

![](images/ars-example-flow2-hex.png){fig-align="center" }

- The ARS provides a **metadata-driven** infrastructure for analysis

- {cards} serves as the engine for the **analysis** 

- {gtsummary} is the engine for summary tables **display**


<!-- 4 -->
## Analysis Results Data (ARD)

* After the initial creation of an ARD, the results can later be re-used again and again for subsequent reporting needs.

![](images/ard-flow.png){fig-align="center"}

# ARDs using {cards} 

<a href="https://insightsengineering.github.io/cards/"><img src="https://insightsengineering.github.io/cards/latest-tag/logo.png" align="center" height="300" alt="cards website" /></a>

<!-- 5 -->
## {cards}: Introduction

::: {.larger}

-   Part of the Pharmaverse

-   Contains a variety of utilities for creating ARDs

-   Can be used within the ARS workflow and separately

-   52K downloads per month ðŸ¤¯

:::

<!-- 6 -->
## What does an ARD look like?

```{r}
#| message: true
library(cards)

# create ARD with default summary statistics
ADSL |> 
  ard_continuous(
    variables = AGE
  )
```

<!-- 7 -->
## What does an ARD look like?

It's simple to pass _any_ function to `ard_continuous()` (base R functions, functions from other package, user-defined functions, etc.)

```{r}
#| message: true
#| code-line-numbers: "3,5"
ADSL |> 
  ard_continuous(
    by = ARM,
    variables = AGE,
    statistic = ~list(cv = \(x) sd(x) / mean(x))
  )
```

<!-- 8 -->
## {cards}: `ard_categorical()`

```{r}
#| message: true
ADSL |> 
  ard_categorical(
    by = ARM,
    variables = AGEGR1
  ) |> head(n = 5)
```

::: {.small}

Other Summary Functions: `ard_dichotomous()`, `ard_hierarchical()`, `ard_complex()`, and `ard_missing()` - they can be **stacked** into a single data frame. ðŸ¥ž

:::


# {cardx} (read: extra cards)

<!-- 9 -->
## {cardx}

-   Extension of the {cards} package, providing additional functions to create Analysis Results Datasets (ARDs).

-   The {cardx} package exports many `ard_*()` function for statistical methods.

![](images/cards-cardx-hex.png){fig-alt="cards and cardx package logos" fig-align="center"}

<!-- 10 -->
## {cardx}

-   Exports ARD frameworks for statistical analyses from many packages 

::: {.larger}
      - {stats}
      - {car}
      - {effectsize}
      - {emmeans}
      - {geepack}
      - {lme4}
      - {parameters}
      - {smd}
      - {survey}
      - {survival}
:::

-   This list is growing (rather quickly) ðŸŒ±

::: aside

with {cards} you can easily implement _any_ method.

:::

# From ARDs to tables with {gtsummary}

<!-- 11 -->
## {gtsummary} in a (stat) nutshell

::::::::: columns
:::::: {.column width="60%"}

{gtsummary} is one of the most popular packages for creating summary tables in the R ecosystem:

-   [1,500,000+ installations]{.emphasis} from CRAN

-   1100+ GitHub stars

-   300+ contributors

-   50+ code contributors

-   Won ASA 2021 Innovation in Programming Award and 2024 Posit Pharma Table Contest

::::::

:::: {.column width="40%"}
<img src="images/gtsummary-logo.png" width="650"/>

::::
:::::::::

<!-- 12 -->
## [{gtsummary} runs on ARDs!]{style="text-decoration: underline;"}

![](images/ARD-gtsummary-example.png)

<!-- 13 -->
## Demographics Example

```{r}
#| code-line-numbers: "|4-9|"
library(gtsummary)

tbl <- dplyr::filter(pharmaverseadam::adsl, SAFFL == "Y") |> 
  tbl_summary(
    by = TRT01A,
    include = c(AGE, AGEGR1),
    type = AGE ~ "continuous2",
    statistic = AGE ~ c("{mean} ({sd})", "{median} ({p25}, {p75})")
  ) |> 
  add_overall() |> 
  add_stat_label()
tbl
```

<!-- 14 -->
## Demographics Example

- Extract the ARD from the table object

```{r}
#| message: true
gather_ard(tbl) |> purrr::pluck("tbl_summary")
```

<!-- 15 -->
## Demographics Example: ARD-first

```{r}
#| code-line-numbers: "|2-6|7-12|"
dplyr::filter(pharmaverseadam::adsl, SAFFL == "Y") |> 
  cards::ard_stack(
    .by = TRT01A, .overall = TRUE, .attributes = TRUE,
    ard_continuous(variables = AGE),
    ard_categorical(variables = AGEGR1)
  ) |> 
  tbl_ard_summary(
    by = TRT01A,
    type = AGE ~ "continuous2",
    statistic = AGE ~ c("{mean} ({sd})", "{median} ({p25}, {p75})"),
    overall = TRUE
  ) |> 
  add_stat_label()
```

<!-- 16 -->
# Our Pilot

## Our ARD-based Pilot

- We wanted to dip our toes into CDISC's Analysis Results Standard (ARS)
  
  - We did not try to implement the full model, just getting a taste
  
  - Using _some_ metadata to drive the creation of TLGs
  
  - Using an ARD-first approach to create our TLGs, e.g. using the {cards} R package to create ARDs, and the {gtsummary} package for tables
  
## What we liked!

- Using {cards}+{cardx}+{gtsummary}, we created every summary for a trial read-out. ðŸ•ºðŸ•ºðŸ•º

- Intuitive design was a key factor in its adoption, even when no prior training was provided.

## What we liked!

- We loved the ARD-based results, which made:

    - QC easy and straightforward.
    - re-purpose easy for different reporting needs.
    - Automation?

<!-- 17 -->
## What we would do differently?

- The full ARS model is metadata driven - the metadata dictate the layout of the tables.

- Non-"standard" tables can be problematic when we use metadata for layouts.

- R scripts are better to handle than metadata files.

## 

::: {.larger}

ðŸ•ºðŸ•º ARD Team ðŸ•ºðŸ•º

:::

::: {.v-center-container}
![](images/collaboration_updated.png)

:::

<!-- ####################### END OF SLIDES ######################### -->



##

::::::::: columns
:::::: {.column width="60%"}

-   Won the 2021 American Statistical Association (ASA) Innovation in Programming Award

<img src="images/asa.png" width="250"/>

-   Agustin Calatroni and I won the 2024 Posit Pharma Table Contest by re-creating an entire CSR with the {gtsummary} package

<img src="images/posit.png" width="280"/>

::::::

:::: {.column width="40%"}
<img src="images/gtsummary-logo.png" width="650"/>

::::
:::::::::






## ARDs uses outside of the ARS

:::{.incremental}

-   Rethinking QC

    -   Highly structured data frame of results is much simpler to QC compared to statistics in a summary table or figure.
    
-   Flexible data file types

    -   ARD can be saved as a dataset (rds, xpt, parquet, etc.), YAML, or JSON file

-   ARDs integrate with the {gtsummary} package to create summary tables

:::







## {cardx} t-test Example

::: {.small}

- We see the results like the mean difference, the confidence interval, and p-value as expected.

- And we also see the function's inputs, which is incredibly useful for re-use, e.g. we know the we did not use equal variances.

:::

```{r}
#| message: true
pharmaverseadam::adsl |> 
  dplyr::filter(ARM %in% c("Xanomeline High Dose", "Xanomeline Low Dose")) |>
  cardx::ard_stats_t_test(by = ARM, variables = AGE)
```

## {cardx} Regression

-   Includes functionality to summarize nearly every type of regression model in the R ecosystem: 

::: {.small}

`r broom.helpers::supported_models$model` (and more)

:::

## {cardx} Regression Example


```{r}
#| message: true
#| warning: false
library(survival); library(ggsurvfit)

# build model
mod <- pharmaverseadam::adtte_onco |> 
  dplyr::filter(PARAM %in% "Progression Free Survival") |>
  coxph(Surv_CNSR() ~ ARM, data = _)

# put model in a summary table
tbl <- gtsummary::tbl_regression(mod, exponentiate = TRUE) |> 
  gtsummary::add_n(location = c('label', 'level')) |> 
  gtsummary::add_nevent(location = c('label', 'level'))
```

<br>

```{r}
#| echo: false
tbl |> 
  gtsummary::as_gt() |> 
  gt::cols_width(c(stat_n, stat_nevent, estimate, p.value) ~ gt::px(25))
```

<!-- ## {cardx} Regression Example -->

<!-- The `cardx::ard_regression()` does **a lot** for us in the background. -->

<!-- - Identifies the variable from the regression terms (i.e. groups levels of the same variable) -->
<!-- - Identifies reference groups from categorical covariates -->
<!-- - Finds variable labels from the source data frames -->
<!-- - Knows the total N of the model, the number of events, and can do the same for each level of categorical variables -->
<!-- - Contextually aware of slopes, odds ratios, hazard ratios, and incidence rate ratios -->
<!-- - And much _**much**_ more. -->

## When things go wrong ðŸ˜±

What happens when statistics are un-calculable? 

```{r}
#| message: true
ard_gone_wrong <- 
  cards::ADSL |> 
  cards::ard_continuous(
    by = ARM,
    variable = AGEGR1,
    statistic = ~list(kurtosis = \(x) e1071::kurtosis(x))
  )
ard_gone_wrong
```

::: {.fragment}

```r
cards::print_ard_conditions(ard_gone_wrong)
```

![](images/ard-error-msg.png)

:::













## {gtsummary} extras

- {gtsummary} tables are composable, meaning complex tables can be cobbled together one piece at a time and combined.

    - many other functions to create common structures, such as, `tbl_continuous()`, `tbl_hierarchical()`,`tbl_cross()`, `tbl_wide_summary()`, and many more

    - `add_*()` functions will add additional columns/summary statistics to an existing table.
    
    - `tbl_merge()` and `tbl_stack()` combine tow more more tables
    
    - and many more functions available for creating beautiful tables!ðŸ¤© 

- Check out the PHUSE US Connect Workshop (_later today_) for more information! 

    - [https://www.danieldsjoberg.com/ARD-PHUSE-workshop-2025/](https://www.danieldsjoberg.com/ARD-PHUSE-workshop-2025/)

## {gtsummary} extras

- If the structured `tbl_*()` and `tbl_ard_*()` functions don't exactly meet your needs, use `as_gtsummary()`!

- The `as_gtsummary()` function ingests a data frame and adds the {gtsummary} framework around it: great for listings and highly bespoke tables.

```{r, echo=FALSE}
theme_gtsummary_compact()
```

```{r}
cards::ADAE[1:7, c("USUBJID", "AESOC", "AETERM", "AESEV")] |> 
  as_gtsummary() |> 
  modify_column_alignment(everything(), "left") |> 
  as_gt(groupname_col = "USUBJID")
```

## {gtsummary} extras

![](images/gtsummary_rmarkdown.png)

